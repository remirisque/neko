Neko: The Clojure/Android Toolkit
=================================
Daniel Solano_Gómez

Neko is a toolkit designed to make Android development using Clojure easier and
more fun.  It accomplishes this by making adding Clojure support to your
Android project easy and providing functional wrappers and alternatives to
Android’s Java API.

Features
--------

WARNING: Note that the libraries are under heavy development.  APIs are subject
to change.  In particular, `neko.threading` will be changed.

The toolkit comes as two components:

. Simplified build support for Clojure using Android’s Ant-based build system,
  and

. The following Clojure libraries:

  * `neko.compilation` helps set up dynamic compilation.

  * `neko.context` helps retrieve resources from the application’s context.

  * `neko.listeners` contains namespaces that take the tedium to adding
    callback code to various widgets.

  * `neko.log` interns functions that make logging from your code clean and
    simple.

  * `neko.threading` will contain utilities to manage asynchronous tasks and
    working with UI threads.

Requirements
------------

Using Neko requires the following:

Clojure 1.2 or newer::
  Clojure 1.2 works on Android 2.2 and newer.  Clojure 1.3 and newer work on
  Android 2.3 and newer.
+
If you would like to use dynamic compilation with Android 2.3 and newer, use
the Clojure available from the `android` branch from
https://github.com/clojure-android/clojure[this repository on GitHub].  This
branch is based off the latest Clojure development version.
+
If you would like to use dynamic compilation, but must support Android 2.1, you
will need to use the version from branch `android-1.2.x`,  available
https://github.com/clojure-android/clojure/tree/android-1.2.x[here].  This is based off
of Clojure 1.2.1.

Android SDK Tools::
  Neko has been developed with the latest revision of the Android SDK tools,
  and is compatible with r17 and up of the Android SDK.
+
WARNING: Revisions 14 and 17 of the Android SDK introduced changes in the Ant
build system.  Neko has been updated to use the build system in r17.  You will
probably need to change your project if you have been using an older version of
Neko/SDK.  For more detailed information, check the Android Tools Project site
for information about the breaking changes in
http://tools.android.com/recent/buildchangesinrevision14[r14] and
http://tools.android.com/recent/dealingwithdependenciesinandroidprojects[r17].

Android Platform SDK 7 (2.1/Eclair) or newer::
  In order to maintain backwards-compatibility, Neko does not support any APIs
  for newer versions of the platform.


Getting started with Neko
-------------------------

The following instructions should help you to add Clojure support to your
project’s build and allow you to use the libraries within your application.

=== 1. Install the Android SDK ===

You can get this from https://developer.android.com/sdk/index.html[directly
from Google].  You will need to be sure to also install a platform for
development.  The
http://wiki.cyanogenmod.com/index.php?title=Howto:_Install_the_Android_SDK[CyanogenMod
wiki] has some more detailed instructions.

=== 2. Get Neko ===

Just clone the repository to your computer:

----
% git clone https://github.com/clojure-android/neko.git
----

If all went well, Neko should now be in a directory called `neko`.


=== 3. Add Clojure ===

Now, go into the `neko` directory and created a directory called `libs`.  Copy
`clojure.jar` into that directory.  If you don't already have Clojure
installed, http://clojure.org/downloads[you can download it from the project’s
page].

=== 4. Create your project ===

Next, you will need to create a new Android project using the `android` command
from the Android SDK, as follows:

----
% android create project -p <directory> -t <target> -k <package> -a <activity>
----

The arguments to this command are:

`<directory>`::

  The name of the directory for your new project.

`<target>`::

  The target API version you will use for development.  For example, you could
  use `android-15` to target the Android 4.0.3 platform.  You can see a list of
  targets available by running `android list targets`.

`<package>`::

  This unique string will be used to identify your application.  You should follow the
  http://www.oracle.com/technetwork/java/codeconventions-135099.html[package
  naming conventions].  An example may be `com.example.cool_clojure_app`.

`<activity>`::

  This is the name of a class that will be the entry point of your application.


Once you run this, you will see a bunch of output as the SDK generates your
project, for example:

----
% android create project -p hello -k com.example.hello_clojure -a HelloActivity -t android-15
Created project directory: hello
Created directory /home/dan/devel/android/hello/src/com/example/hello_clojure
Added file hello/src/com/example/hello_clojure/HelloActivity.java
Created directory /home/dan/devel/android/hello/res
Created directory /home/dan/devel/android/hello/bin
Created directory /home/dan/devel/android/hello/libs
Created directory /home/dan/devel/android/hello/res/values
Added file hello/res/values/strings.xml
Created directory /home/dan/devel/android/hello/res/layout
Added file hello/res/layout/main.xml
Created directory /home/dan/devel/android/hello/res/drawable-hdpi
Created directory /home/dan/devel/android/hello/res/drawable-mdpi
Created directory /home/dan/devel/android/hello/res/drawable-ldpi
Added file hello/AndroidManifest.xml
Added file hello/build.xml
Added file hello/proguard-project.txt
----

=== 5. Add Neko as a library for your project ===

Change into the new directory for your project and calculate the relative path
to the directory where you cloned Neko.  Now, run the following command:

----
% android update project -p . -l <../relative/path/to/neko>
----

For example:

----
% cd hello
% android update project -p . -l ../neko
Resolved location of library project to: /home/user/work/neko
Updated project.properties
Updated local.properties
Updated file ./proguard-project.txt
----

=== 6. Get Ant to build your Clojure code ===

To enable Neko’s build support for Clojure, you will need to make two
modifications to the `build.xml` file in your project directory.

. You must add a line to similar to the following *before the line with `<import file="${sdk.dir}/tools/ant/build.xml" />`*.
+
----
<import file="/path/to/neko/build-support/clojure.xml"/>
----
+
The important thing is that the value of the `file` attribute should resolve to
the `clojure.xml` in the `build-support` directory of this repository.  It may
be either a relative or absolute path.

. You must find the line that reads `<!-- version-tag: 1 -->` and change the
  `1` to `custom`.  If you do not do this, Android may overwrite your changes.

=== 7. Get rid of that Java file  ===

You may have noticed that when you created the project file, Android generated
a Java file corresponding to the package and activity name.  Delete it.  For
example:

----
% rm -r src/com
----

=== 8. Create a source directory for you Clojure files ===

By default, Neko looks in `src/clojure`.

----
% mkdir src/clojure
----

=== 9. Write your first Android application in Clojure ===

For replicate the default activity that the SDK created in Clojure, you will
need to create a source file with the same namespace as the original file.
For example, given the package `com.example.hello_clojure` and the activity
`HelloActivity`, you would create the file
`src/clojure/com/example/hello_clojure/HelloActivity.clj` as follows:

[source,lisp]
----
(ns com.example.hello_clojure.HelloActivity
  (:gen-class :main false
              :extends android.app.Activity
              :exposes-methods {onCreate superOnCreate})
  (:import [com.example.hello_clojure R$layout]))

(defn -onCreate
  [this bundle]
  (doto this
    (.superOnCreate bundle)
    (.setContentView R$layout/main)))
----

As a gist: https://gist.github.com/2361385[]

=== 10. Build and run it ===

You can now run and install the application to a running emulator or a
connected device using:

----
% ant debug install
----

If all went well, you should be able to find your application in the launcher.
When you run it, after several seconds, you should see a simple `Hello World'
appear.

=== 11. Make something wonderful ===

From this point on, it is up to you to create something wonderful.


Advanced topics
---------------

Here are some more things you can do with Neko:

=== `clojure.properties` ===

You can place a `clojure.properties` file in the `build-support` directory from
Neko (where `clojure.xml` lives).  This file will be sourced and used in any
project in which you have enabled Clojure build support.

=== Reflection warnings ===

To enable reflection warnings during compilation, simply set the
`clojure.warn.reflection` property to `true`.  This is something that might be
good to put in that `clojure.properties` file.

=== Mixed Java/Clojure projects ===

Neko will build all Java sources you have placed in `src/java` before any
Clojure sources.


Legal information
-----------------

Copyright © 2011 Sattvik Software & Technology Resources, Ltd. Co. +
All rights reserved.

=== Eclipse Public License - v 1.0 ===

THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC
LICENSE (“AGREEMENT”). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE
PROGRAM CONSTITUTES RECIPIENT’S ACCEPTANCE OF THIS AGREEMENT.

==== 1. DEFINITIONS ====

“Contribution” means:

a. in the case of the initial Contributor, the initial
   code and documentation distributed under this Agreement, and

b. in the case of each subsequent Contributor:

   i)  changes to the Program, and

   ii) additions to the Program;
+
where such changes and/or additions to the Program originate from and are
distributed by that particular Contributor. A Contribution ‘originates’ from a
Contributor if it was added to the Program by such Contributor itself or anyone
acting on such Contributor’s behalf.  Contributions do not include additions to
the Program which: (i) are separate modules of software distributed in
conjunction with the Program under their own license agreement, and (ii) are
not derivative works of the Program.

“Contributor” means any person or entity that distributes the Program.

“Licensed Patents” mean patent claims licensable by a Contributor which are
necessarily infringed by the use or sale of its Contribution alone or when
combined with the Program.

“Program” means the Contributions distributed in accordance with this
Agreement.

“Recipient” means anyone who receives the Program under this Agreement,
including all Contributors.

==== 2. GRANT OF RIGHTS ====

a. Subject to the terms of this Agreement, each Contributor hereby grants
   Recipient a non-exclusive, worldwide, royalty-free copyright license to
   reproduce, prepare derivative works of, publicly display, publicly perform,
   distribute and sublicense the Contribution of such Contributor, if any, and
   such derivative works, in source code and object code form.

b. Subject to the terms of this Agreement, each Contributor hereby grants
   Recipient a non-exclusive, worldwide, royalty-free patent license under
   Licensed Patents to make, use, sell, offer to sell, import and otherwise
   transfer the Contribution of such Contributor, if any, in source code and
   object code form. This patent license shall apply to the combination of the
   Contribution and the Program if, at the time the Contribution is added by
   the Contributor, such addition of the Contribution causes such combination
   to be covered by the Licensed Patents. The patent license shall not apply to
   any other combinations which include the Contribution. No hardware per se is
   licensed hereunder.

c. Recipient understands that although each Contributor grants the licenses to
   its Contributions set forth herein, no assurances are provided by any
   Contributor that the Program does not infringe the patent or other
   intellectual property rights of any other entity. Each Contributor disclaims
   any liability to Recipient for claims brought by any other entity based on
   infringement of intellectual property rights or otherwise. As a condition to
   exercising the rights and licenses granted hereunder, each Recipient hereby
   assumes sole responsibility to secure any other intellectual property rights
   needed, if any. For example, if a third party patent license is required to
   allow Recipient to distribute the Program, it is Recipient’s responsibility
   to acquire that license before distributing the Program.

d. Each Contributor represents that to its knowledge it has sufficient
   copyright rights in its Contribution, if any, to grant the copyright license
   set forth in this Agreement.

==== 3. REQUIREMENTS ====

A Contributor may choose to distribute the Program in object code form under
its own license agreement, provided that:

a. it complies with the terms and conditions of this Agreement; and

b. its license agreement:

   i) effectively disclaims on behalf of all Contributors all warranties and
      conditions, express and implied, including warranties or conditions of
      title and non-infringement, and implied warranties or conditions of
      merchantability and fitness for a particular purpose;

   ii) effectively excludes on behalf of all Contributors all liability for
       damages, including direct, indirect, special, incidental and
       consequential damages, such as lost profits;

   iii) states that any provisions which differ from this Agreement are offered
        by that Contributor alone and not by any other party; and

   iv) states that source code for the Program is available from such
       Contributor, and informs licensees how to obtain it in a reasonable
       manner on or through a medium customarily used for software
       exchange.

When the Program is made available in source code form:

a. it must be made available under this Agreement; and

b. a copy of this Agreement must be included with each copy of the Program.

Contributors may not remove or alter any copyright notices contained within the
Program.

Each Contributor must identify itself as the originator of its Contribution, if
any, in a manner that reasonably allows subsequent Recipients to identify the
originator of the Contribution.

==== 4. COMMERCIAL DISTRIBUTION ====

Commercial distributors of software may accept certain responsibilities with
respect to end users, business partners and the like. While this license is
intended to facilitate the commercial use of the Program, the Contributor who
includes the Program in a commercial product offering should do so in a manner
which does not create potential liability for other Contributors. Therefore, if
a Contributor includes the Program in a commercial product offering, such
Contributor (“Commercial Contributor”) hereby agrees to defend and indemnify
every other Contributor (“Indemnified Contributor”) against any losses, damages
and costs (collectively “Losses”) arising from claims, lawsuits and other legal
actions brought by a third party against the Indemnified Contributor to the
extent caused by the acts or omissions of such Commercial Contributor in
connection with its distribution of the Program in a commercial product
offering. The obligations in this section do not apply to any claims or Losses
relating to any actual or alleged intellectual property infringement. In order
to qualify, an Indemnified Contributor must: a) promptly notify the Commercial
Contributor in writing of such claim, and b) allow the Commercial Contributor
to control, and cooperate with the Commercial Contributor in, the defense and
any related settlement negotiations. The Indemnified Contributor may
participate in any such claim at its own expense.

For example, a Contributor might include the Program in a commercial product
offering, Product X. That Contributor is then a Commercial Contributor. If that
Commercial Contributor then makes performance claims, or offers warranties
related to Product X, those performance claims and warranties are such
Commercial Contributor’s responsibility alone. Under this section, the
Commercial Contributor would have to defend claims against the other
Contributors related to those performance claims and warranties, and if a court
requires any other Contributor to pay any damages as a result, the Commercial
Contributor must pay those damages.

==== 5. NO WARRANTY ====

EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS
PROVIDED ON AN “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS
OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION,
ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY
OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely
responsible for determining the appropriateness of using and
distributing the Program and assumes all risks associated with its
exercise of rights under this Agreement , including but not limited to
the risks and costs of program errors, compliance with applicable laws,
damage to or loss of data, programs or equipment, and unavailability or
interruption of operations.

==== 6. DISCLAIMER OF LIABILITY ====

EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT
NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING
WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR
DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED
HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

==== 7. GENERAL ====

If any provision of this Agreement is invalid or unenforceable under
applicable law, it shall not affect the validity or enforceability of
the remainder of the terms of this Agreement, and without further action
by the parties hereto, such provision shall be reformed to the minimum
extent necessary to make such provision valid and enforceable.

If Recipient institutes patent litigation against any entity
(including a cross-claim or counterclaim in a lawsuit) alleging that the
Program itself (excluding combinations of the Program with other
software or hardware) infringes such Recipient’s patent(s), then such
Recipient’s rights granted under Section 2(b) shall terminate as of the
date such litigation is filed.

All Recipient’s rights under this Agreement shall terminate if it
fails to comply with any of the material terms or conditions of this
Agreement and does not cure such failure in a reasonable period of time
after becoming aware of such noncompliance. If all Recipient’s rights
under this Agreement terminate, Recipient agrees to cease use and
distribution of the Program as soon as reasonably practicable. However,
Recipient’s obligations under this Agreement and any licenses granted by
Recipient relating to the Program shall continue and survive.

Everyone is permitted to copy and distribute copies of this
Agreement, but in order to avoid inconsistency the Agreement is
copyrighted and may only be modified in the following manner. The
Agreement Steward reserves the right to publish new versions (including
revisions) of this Agreement from time to time. No one other than the
Agreement Steward has the right to modify this Agreement. The Eclipse
Foundation is the initial Agreement Steward. The Eclipse Foundation may
assign the responsibility to serve as the Agreement Steward to a
suitable separate entity. Each new version of the Agreement will be
given a distinguishing version number. The Program (including
Contributions) may always be distributed subject to the version of the
Agreement under which it was received. In addition, after a new version
of the Agreement is published, Contributor may elect to distribute the
Program (including its Contributions) under the new version. Except as
expressly stated in Sections 2(a) and 2(b) above, Recipient receives no
rights or licenses to the intellectual property of any Contributor under
this Agreement, whether expressly, by implication, estoppel or
otherwise. All rights in the Program not expressly granted under this
Agreement are reserved.

This Agreement is governed by the laws of the State of New York and
the intellectual property laws of the United States of America. No party
to this Agreement will bring a legal action under this Agreement more
than one year after the cause of action arose. Each party waives its
rights to a jury trial in any resulting litigation.

// vim:set spell ft=asciidoc:
